# Copyright (c) 2013-2022 GitHub Inc.
# Copyright 2022 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//node/node_files.gni")
import("//node/node.gni")

config("base64_config") {
  defines = [ "BASE64_STATIC_DEFINE" ]
  include_dirs = [ "base64/include", "base64/lib" ]
}

node_dep("base64") {
  public_configs = [ ":base64_config" ]
  defines = [
    "BASE64_STATIC_DEFINE",
    # Default for x86 architectures.
    "HAVE_SSSE3=1",
    "HAVE_SSE41=1",
    "HAVE_SSE42=1",
    "HAVE_AVX=1",
    "HAVE_AVX2=1"
  ]
  include_dirs = [ "base64/include", "base64/lib" ]
  sources = node_files.base64_sources
  deps = [
    ":base64_ssse3",
    ":base64_sse41",
    ":base64_sse42",
    ":base64_avx",
    ":base64_avx2",
    ":base64_neon32",
    ":base64_neon64"
  ]
}

source_set("base64_ssse3") {
  include_dirs = [ "base64/include", "base64/lib" ]
  defines = [ "BASE64_STATIC_DEFINE" ]
  if (target_cpu == "x86" || target_cpu == "x64") {
    defines += [ "HAVE_SSSE3=1" ]
  }
  sources = [ "base64/lib/arch/ssse3/codec.c" ]
  if (!is_win) {
    cflags_c = [
      "-Wno-implicit-fallthrough",
      "-mssse3"
    ]
  }
}

source_set("base64_sse41") {
  include_dirs = [ "base64/include", "base64/lib" ]
  defines = [ "BASE64_STATIC_DEFINE" ]
  if (target_cpu == "x86" || target_cpu == "x64") {
    defines += [ "HAVE_SSE41=1" ]
  }
  sources = [ "base64/lib/arch/sse41/codec.c" ]
  if (!is_win) {
    cflags_c = [
      "-Wno-implicit-fallthrough",
      "-msse4.1"
    ]
  }
}

source_set("base64_sse42") {
  include_dirs = [ "base64/include", "base64/lib" ]
  defines = [ "BASE64_STATIC_DEFINE" ]
  if (target_cpu == "x86" || target_cpu == "x64") {
    defines += [ "HAVE_SSE42=1" ]
  }
  sources = [ "base64/lib/arch/sse42/codec.c" ]
  if (!is_win) {
    cflags_c = [
      "-Wno-implicit-fallthrough",
      "-msse4.2"
    ]
  }
}

source_set("base64_avx") {
  include_dirs = [ "base64/include", "base64/lib" ]
  defines = [ "BASE64_STATIC_DEFINE" ]
  if (target_cpu == "x86" || target_cpu == "x64") {
    defines += [ "HAVE_AVX=1" ]
  }
  sources = [ "base64/lib/arch/avx/codec.c" ]
  if (!is_win) {
    cflags_c = [
      "-Wno-implicit-fallthrough",
      "-mavx"
    ]
  }
}
source_set("base64_avx2") {
  include_dirs = [ "base64/include", "base64/lib" ]
  defines = [ "BASE64_STATIC_DEFINE" ]
  if (target_cpu == "x86" || target_cpu == "x64") {
    defines += [ "HAVE_AVX2=1" ]
  }
  sources = [ "base64/lib/arch/avx2/codec.c" ]
  if (!is_win) {
    cflags_c = [
      "-Wno-implicit-fallthrough",
      "-mavx2"
    ]
  }
}

source_set("base64_neon32") {
  include_dirs = [ "base64/include", "base64/lib" ]
  defines = [ "BASE64_STATIC_DEFINE" ]
  if (target_cpu == "arm") {
    defines += [ "HAVE_NEON32=1" ]
  }
  sources = [ "base64/lib/arch/neon32/codec.c" ]
  if (target_cpu == "arm" && !is_win) {
    cflags_c = [
      "-Wno-implicit-fallthrough",
      "-mfpu=neon"
    ]
  }
}

source_set("base64_neon64") {
  include_dirs = [ "base64/include", "base64/lib" ]
  defines = [ "BASE64_STATIC_DEFINE" ]
  if (target_cpu == "arm64") {
    defines += [ "HAVE_NEON64=1" ]
  }
  sources = [ "base64/lib/arch/neon64/codec.c" ]
}
