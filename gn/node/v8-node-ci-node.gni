# Copyright 2019 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//v8/gni/snapshot_toolchain.gni")

declare_args() {
  # Compile node modules with custom libc++
  node_use_custom_libcxx = false
}

if (is_win) {
  node_exe = "node.exe"
} else {
  node_exe = "node"
}

template("call_node") {
  action(target_name) {
    deps = invoker.deps + [ "//node:node($v8_snapshot_toolchain)" ]
    script = "//tools/run_executable_in_dir.py"
    inputs = invoker.inputs
    stamp = "$target_gen_dir/$target_name.stamp"
    outputs = [ stamp ]
    exe = get_label_info("//node:node($v8_snapshot_toolchain)",
                         "root_out_dir") + "/" + node_exe
    base = invoker.base
    env = []
    if (defined(invoker.env)) {
      env = invoker.env
    }
    args = [
      rebase_path(base, root_build_dir),
      rebase_path(stamp, root_build_dir),
    ] + env + [
      rebase_path(exe, base),
    ] + invoker.args
  }
}

# TODO: add correct list of outputs.
template("build_addons") {
  call_node(target_name) {
    deps = invoker.deps
    build_scripts = [
      "//node/tools/build-addons.mjs",
      "//node/deps/npm/node_modules/node-gyp/bin/node-gyp.js",
    ]
    inputs = invoker.inputs + build_scripts
    base = root_gen_dir

    env = [
      "--env", "npm_config_loglevel", "silent",
      "--env", "npm_config_python", "python",
      "--env", "npm_config_nodedir",
          rebase_path("$root_gen_dir/node", root_build_dir),
      # Force native modules to be compile with clang
      "--env", "CXX",
          rebase_path("//third_party/llvm-build/Release+Asserts/bin/clang++"),

    ]
    if (node_use_custom_libcxx) {
      libcpp_path = rebase_path("//buildtools/third_party/libc++")
      libcppabi_path = rebase_path("//buildtools/third_party/libc++abi/trunk/include")
      env += [ "--env", "CFLAGS", "-nostdinc++ -isystem $libcpp_path -isystem $libcpp_path/trunk/include -isystem $libcppabi_path" ]
    }
    args = rebase_path(build_scripts, base) +
           [ rebase_path(target_gen_dir, base) ]
  }
}

template("sync_files") {
  copy("$target_name.copy") {
    sources = invoker.sources
    outputs = [ "$target_gen_dir/{{source_target_relative}}" ]
  }
  action(target_name) {
    script = "//tools/mirror_removal.py"
    inputs = [ "//node_files.json" ]
    outputs = [ "$target_gen_dir/$target_name.stamp" ]
    args = rebase_path([
      ".",
      target_gen_dir,
    ] + outputs, root_build_dir)
    public_deps = [":$target_name.copy"]
  }
}
