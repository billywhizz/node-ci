# Copyright (c) 2013-2019 GitHub Inc.
# Copyright 2019 the V8 project authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import json
import os
import subprocess
import sys

basedir = os.path.dirname(__file__)
sys.path.append(os.path.join(basedir, os.pardir, "node", "tools"))
import install

def LoadPythonDictionary(path):
  file_string = open(path).read()
  try:
    file_data = eval(file_string, {'__builtins__': None}, None)
  except SyntaxError, e:
    e.filename = path
    raise
  except Exception, e:
    raise Exception("Unexpected error while reading %s: %s" % (path, str(e)))

  assert isinstance(file_data, dict), "%s does not eval to a dictionary" % path

  return file_data


FILENAMES_JSON_HEADER = '''
// This file is automatically generated by generate_gn_filenames_json.py
// DO NOT EDIT
'''.lstrip()

def RedirectV8(list):
  return [f.replace('deps/v8/', '../v8/', 1) for f in list]

def GitLsFiles(path):
  output = subprocess.check_output(["git", "ls-files"], cwd=path)
  return ['//' + path + '/' + x for x in output.splitlines()]

if __name__ == '__main__':
  # Set up paths.
  root_dir = os.path.dirname(os.path.dirname(__file__))
  node_dir = os.path.join(root_dir, 'node')
  node_gyp_file = os.path.join(node_dir, 'node.gyp')
  out_file = os.path.join(root_dir, 'node_files.json')

  out = {}
  # Load file list from node.gyp.
  node_gyp = LoadPythonDictionary(node_gyp_file)

  # Find JS lib file and single out files from V8.
  library_files = node_gyp['variables']['library_files']
  out['v8_library_files'] = [
      f.replace('deps/', '../') for f in library_files if f.startswith('deps/v8')]
  out['node_library_files'] = [
      f for f in library_files if not f.startswith('deps/v8')]
  out['all_library_files'] = library_files

  # Find C++ source files.
  node_lib_target = next(
      t for t in node_gyp['targets']
      if t['target_name'] == '<(node_lib_target_name)')
  node_source_blacklist = {
      '<@(library_files)',
      'common.gypi',
      '<(SHARED_INTERMEDIATE_DIR)/node_javascript.cc',
  }
  node_sources = [
      f for f in node_lib_target['sources']
      if f not in node_source_blacklist]
  out['node_sources'] = [
      f.replace('deps/v8/', '../v8/', 1) for f in node_sources]

  # Find cctest files.
  cctest_target = next(
      t for t in node_gyp['targets']
      if t['target_name'] == 'cctest')
  out['cctest_sources'] = cctest_target['sources']

  out['headers'] = []

  # Find node/tools/doc content.
  tools_doc_dir = os.path.join(node_dir, 'tools', 'doc')
  out['tools_doc_files'] = GitLsFiles(tools_doc_dir)

  # Find node/test/addons content.
  test_addons_dir = os.path.join(node_dir, 'test', 'addons')
  out['test_addons_files'] = GitLsFiles(test_addons_dir)

  # Collect headers.
  def add_headers(files, dest_dir):
    if 'src/node.h' in files:
      files = [f for f in files if f.endswith('.h')]
    files = RedirectV8(files)
    hs = {'files': sorted(files), 'dest_dir': dest_dir}
    out['headers'].append(hs)

  install.variables = {'node_shared_libuv': 'false'}
  install.headers(add_headers)

  # Write file list as JSON.
  with open(out_file, 'w') as f:
    f.write(FILENAMES_JSON_HEADER)
    f.write(json.dumps(out, sort_keys=True, indent=2, separators=(',', ': ')))
    f.write('\n')
